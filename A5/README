Group 8
Assignment 5 - Scheme Interpreter

Part 1: 
#####
BE CAREFUL: Our tests use the variables P and Q and so they are hard coded
in to be true and false. If you wish to test your own functions please use
any other letters.
####
To run part 1 exeucte the command (load "A5boolexp") followed by
a command such as (boolexp '(equiv #t #f)). There are some sample tests
available in the file. This is based on the eeval assign model in the book.

Part 2:
#####
BE CAREFUL: Our tests use the variables P and Q and so they are hard coded
in to be true and false. If you wish to test your own functions please use
any other letters.
####
to run part to execute the command (load "A5boolexp") followed by the
tautology command which takes the form of (taut? '(equiv a b)) or possibly
of the form (taut? '(a (or (not a)))). It returns true if the statement is
true for all choice of variables and is false otherwise. The program first
extracts all variables by iterating through all of the elements of the list
and adding them if they are not any of the boolean functions, #t, #f, or if
the word has already been added. It stores them in a list of pairs and when
a value is added it is initialized to #f Then it tests every combination of #t and #f by treating it like a boolean number and constantly adding one until
all of the number are already one then you are done. (each variable
represents a boolean digit). Then the variables are replaced and evaluated
for their given values. If it is true it moves on, otherwise it returns
true. If it makes it to the end, then it returns true. There are some built
in tests in the file.

Part 3: The code for the interpreter is in the file ch4-mceval.scm. The
version with the modifications for =, -, *,+ defined as primatives are in
ch4-mceval-trace.scm. A5fact-trace contains the actual trace of the
factorial function and A5part3-explanation contains the explanation of how
the interpreter interprets the code.

Part 4: ch4-mceval-dyn-scope.scm contains a version of the interpreter with
static instead of dynamic scoping. A5dyn-vs-static.scm contains a program
that will have different results depending on whether the program is run
with static or dynamic scoping.

Part 5: A5minilang.scm contains the methods for the mini language defined in
part 5. There are some sample test cases in the file. Variable assignment is 
based on having a list with the first element being the variable name and the 
second element being the variable value. As with the boolexp file, this is 
based on the eval assign model.
