Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt SEMICOLON stmt_list
Rule 3     stmt_list -> stmt
Rule 4     stmt -> assign_stmt
Rule 5     stmt -> while_stmt
Rule 6     stmt -> if_stmt
Rule 7     expr -> expr PLUS term
Rule 8     expr -> expr MINUS term
Rule 9     expr_list -> expr COMMA expr_list
Rule 10    expr_list -> expr
Rule 11    expr -> term
Rule 12    term -> term TIMES fact
Rule 13    term -> term CONCAT fact
Rule 14    term -> fact
Rule 15    fact -> LPAREN expr RPAREN
Rule 16    fact -> NUMBER
Rule 17    fact -> IDENT
Rule 18    fact -> list
Rule 19    fact -> func_call
Rule 20    fact -> proc
Rule 21    assign_stmt -> IDENT ASSIGNOP expr
Rule 22    while_stmt -> WHILE expr DO stmt_list OD
Rule 23    if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI
Rule 24    proc -> PROC LPAREN param_list RPAREN stmt_list END
Rule 25    proc -> PROC LPAREN RPAREN stmt_list END
Rule 26    param_list -> IDENT COMMA param_list
Rule 27    param_list -> IDENT
Rule 28    list -> LBRACKET sequence RBRACKET
Rule 29    list -> LBRACKET RBRACKET
Rule 30    sequence -> listelement COMMA sequence
Rule 31    sequence -> listelement
Rule 32    listelement -> list
Rule 33    listelement -> NUMBER
Rule 34    func_call -> IDENT LPAREN expr_list RPAREN

Terminals, with rules where they appear

ASSIGNOP             : 21
COMMA                : 9 26 30
CONCAT               : 13
DO                   : 22
ELSE                 : 23
END                  : 24 25
FI                   : 23
IDENT                : 17 21 26 27 34
IF                   : 23
LBRACKET             : 28 29
LPAREN               : 15 24 25 34
MINUS                : 8
NUMBER               : 16 33
OD                   : 22
PLUS                 : 7
PROC                 : 24 25
RBRACKET             : 28 29
RPAREN               : 15 24 25 34
SEMICOLON            : 2
THEN                 : 23
TIMES                : 12
WHILE                : 22
error                : 

Nonterminals, with rules where they appear

assign_stmt          : 4
expr                 : 7 8 9 10 15 21 22 23
expr_list            : 9 34
fact                 : 12 13 14
func_call            : 19
if_stmt              : 6
list                 : 18 32
listelement          : 30 31
param_list           : 24 26
proc                 : 20
program              : 0
sequence             : 28 30
stmt                 : 2 3
stmt_list            : 1 2 22 23 23 24 25
term                 : 7 8 11 12 13
while_stmt           : 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (21) assign_stmt -> . IDENT ASSIGNOP expr
    (22) while_stmt -> . WHILE expr DO stmt_list OD
    (23) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI

    IDENT           shift and go to state 2
    WHILE           shift and go to state 4
    IF              shift and go to state 9

    stmt_list                      shift and go to state 1
    if_stmt                        shift and go to state 3
    stmt                           shift and go to state 5
    assign_stmt                    shift and go to state 6
    while_stmt                     shift and go to state 7
    program                        shift and go to state 8

state 1

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 2

    (21) assign_stmt -> IDENT . ASSIGNOP expr

    ASSIGNOP        shift and go to state 10


state 3

    (6) stmt -> if_stmt .

    SEMICOLON       reduce using rule 6 (stmt -> if_stmt .)
    END             reduce using rule 6 (stmt -> if_stmt .)
    ELSE            reduce using rule 6 (stmt -> if_stmt .)
    OD              reduce using rule 6 (stmt -> if_stmt .)
    FI              reduce using rule 6 (stmt -> if_stmt .)
    $end            reduce using rule 6 (stmt -> if_stmt .)


state 4

    (22) while_stmt -> WHILE . expr DO stmt_list OD
    (7) expr -> . expr PLUS term
    (8) expr -> . expr MINUS term
    (11) expr -> . term
    (12) term -> . term TIMES fact
    (13) term -> . term CONCAT fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    term                           shift and go to state 17
    expr                           shift and go to state 18
    list                           shift and go to state 19
    proc                           shift and go to state 13
    fact                           shift and go to state 21

state 5

    (2) stmt_list -> stmt . SEMICOLON stmt_list
    (3) stmt_list -> stmt .

    SEMICOLON       shift and go to state 22
    $end            reduce using rule 3 (stmt_list -> stmt .)
    OD              reduce using rule 3 (stmt_list -> stmt .)
    FI              reduce using rule 3 (stmt_list -> stmt .)
    END             reduce using rule 3 (stmt_list -> stmt .)
    ELSE            reduce using rule 3 (stmt_list -> stmt .)


state 6

    (4) stmt -> assign_stmt .

    SEMICOLON       reduce using rule 4 (stmt -> assign_stmt .)
    END             reduce using rule 4 (stmt -> assign_stmt .)
    ELSE            reduce using rule 4 (stmt -> assign_stmt .)
    OD              reduce using rule 4 (stmt -> assign_stmt .)
    FI              reduce using rule 4 (stmt -> assign_stmt .)
    $end            reduce using rule 4 (stmt -> assign_stmt .)


state 7

    (5) stmt -> while_stmt .

    SEMICOLON       reduce using rule 5 (stmt -> while_stmt .)
    END             reduce using rule 5 (stmt -> while_stmt .)
    ELSE            reduce using rule 5 (stmt -> while_stmt .)
    OD              reduce using rule 5 (stmt -> while_stmt .)
    FI              reduce using rule 5 (stmt -> while_stmt .)
    $end            reduce using rule 5 (stmt -> while_stmt .)


state 8

    (0) S' -> program .



state 9

    (23) if_stmt -> IF . expr THEN stmt_list ELSE stmt_list FI
    (7) expr -> . expr PLUS term
    (8) expr -> . expr MINUS term
    (11) expr -> . term
    (12) term -> . term TIMES fact
    (13) term -> . term CONCAT fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    term                           shift and go to state 17
    expr                           shift and go to state 23
    list                           shift and go to state 19
    proc                           shift and go to state 13
    fact                           shift and go to state 21

state 10

    (21) assign_stmt -> IDENT ASSIGNOP . expr
    (7) expr -> . expr PLUS term
    (8) expr -> . expr MINUS term
    (11) expr -> . term
    (12) term -> . term TIMES fact
    (13) term -> . term CONCAT fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    term                           shift and go to state 17
    expr                           shift and go to state 24
    list                           shift and go to state 19
    proc                           shift and go to state 13
    fact                           shift and go to state 21

state 11

    (16) fact -> NUMBER .

    TIMES           reduce using rule 16 (fact -> NUMBER .)
    CONCAT          reduce using rule 16 (fact -> NUMBER .)
    COMMA           reduce using rule 16 (fact -> NUMBER .)
    PLUS            reduce using rule 16 (fact -> NUMBER .)
    MINUS           reduce using rule 16 (fact -> NUMBER .)
    RPAREN          reduce using rule 16 (fact -> NUMBER .)
    DO              reduce using rule 16 (fact -> NUMBER .)
    THEN            reduce using rule 16 (fact -> NUMBER .)
    SEMICOLON       reduce using rule 16 (fact -> NUMBER .)
    $end            reduce using rule 16 (fact -> NUMBER .)
    OD              reduce using rule 16 (fact -> NUMBER .)
    ELSE            reduce using rule 16 (fact -> NUMBER .)
    END             reduce using rule 16 (fact -> NUMBER .)
    FI              reduce using rule 16 (fact -> NUMBER .)


state 12

    (28) list -> LBRACKET . sequence RBRACKET
    (29) list -> LBRACKET . RBRACKET
    (30) sequence -> . listelement COMMA sequence
    (31) sequence -> . listelement
    (32) listelement -> . list
    (33) listelement -> . NUMBER
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET

    RBRACKET        shift and go to state 28
    NUMBER          shift and go to state 27
    LBRACKET        shift and go to state 12

    listelement                    shift and go to state 29
    list                           shift and go to state 26
    sequence                       shift and go to state 25

state 13

    (20) fact -> proc .

    TIMES           reduce using rule 20 (fact -> proc .)
    CONCAT          reduce using rule 20 (fact -> proc .)
    COMMA           reduce using rule 20 (fact -> proc .)
    PLUS            reduce using rule 20 (fact -> proc .)
    MINUS           reduce using rule 20 (fact -> proc .)
    RPAREN          reduce using rule 20 (fact -> proc .)
    DO              reduce using rule 20 (fact -> proc .)
    THEN            reduce using rule 20 (fact -> proc .)
    SEMICOLON       reduce using rule 20 (fact -> proc .)
    $end            reduce using rule 20 (fact -> proc .)
    OD              reduce using rule 20 (fact -> proc .)
    ELSE            reduce using rule 20 (fact -> proc .)
    END             reduce using rule 20 (fact -> proc .)
    FI              reduce using rule 20 (fact -> proc .)


state 14

    (19) fact -> func_call .

    TIMES           reduce using rule 19 (fact -> func_call .)
    CONCAT          reduce using rule 19 (fact -> func_call .)
    COMMA           reduce using rule 19 (fact -> func_call .)
    PLUS            reduce using rule 19 (fact -> func_call .)
    MINUS           reduce using rule 19 (fact -> func_call .)
    RPAREN          reduce using rule 19 (fact -> func_call .)
    DO              reduce using rule 19 (fact -> func_call .)
    THEN            reduce using rule 19 (fact -> func_call .)
    SEMICOLON       reduce using rule 19 (fact -> func_call .)
    $end            reduce using rule 19 (fact -> func_call .)
    OD              reduce using rule 19 (fact -> func_call .)
    ELSE            reduce using rule 19 (fact -> func_call .)
    END             reduce using rule 19 (fact -> func_call .)
    FI              reduce using rule 19 (fact -> func_call .)


state 15

    (17) fact -> IDENT .
    (34) func_call -> IDENT . LPAREN expr_list RPAREN

    TIMES           reduce using rule 17 (fact -> IDENT .)
    CONCAT          reduce using rule 17 (fact -> IDENT .)
    COMMA           reduce using rule 17 (fact -> IDENT .)
    PLUS            reduce using rule 17 (fact -> IDENT .)
    MINUS           reduce using rule 17 (fact -> IDENT .)
    RPAREN          reduce using rule 17 (fact -> IDENT .)
    DO              reduce using rule 17 (fact -> IDENT .)
    THEN            reduce using rule 17 (fact -> IDENT .)
    SEMICOLON       reduce using rule 17 (fact -> IDENT .)
    $end            reduce using rule 17 (fact -> IDENT .)
    OD              reduce using rule 17 (fact -> IDENT .)
    ELSE            reduce using rule 17 (fact -> IDENT .)
    END             reduce using rule 17 (fact -> IDENT .)
    FI              reduce using rule 17 (fact -> IDENT .)
    LPAREN          shift and go to state 30


state 16

    (15) fact -> LPAREN . expr RPAREN
    (7) expr -> . expr PLUS term
    (8) expr -> . expr MINUS term
    (11) expr -> . term
    (12) term -> . term TIMES fact
    (13) term -> . term CONCAT fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    term                           shift and go to state 17
    expr                           shift and go to state 31
    list                           shift and go to state 19
    proc                           shift and go to state 13
    fact                           shift and go to state 21

state 17

    (11) expr -> term .
    (12) term -> term . TIMES fact
    (13) term -> term . CONCAT fact

    PLUS            reduce using rule 11 (expr -> term .)
    MINUS           reduce using rule 11 (expr -> term .)
    SEMICOLON       reduce using rule 11 (expr -> term .)
    $end            reduce using rule 11 (expr -> term .)
    OD              reduce using rule 11 (expr -> term .)
    ELSE            reduce using rule 11 (expr -> term .)
    END             reduce using rule 11 (expr -> term .)
    FI              reduce using rule 11 (expr -> term .)
    COMMA           reduce using rule 11 (expr -> term .)
    RPAREN          reduce using rule 11 (expr -> term .)
    THEN            reduce using rule 11 (expr -> term .)
    DO              reduce using rule 11 (expr -> term .)
    TIMES           shift and go to state 33
    CONCAT          shift and go to state 32


state 18

    (22) while_stmt -> WHILE expr . DO stmt_list OD
    (7) expr -> expr . PLUS term
    (8) expr -> expr . MINUS term

    DO              shift and go to state 34
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 19

    (18) fact -> list .

    TIMES           reduce using rule 18 (fact -> list .)
    CONCAT          reduce using rule 18 (fact -> list .)
    COMMA           reduce using rule 18 (fact -> list .)
    PLUS            reduce using rule 18 (fact -> list .)
    MINUS           reduce using rule 18 (fact -> list .)
    RPAREN          reduce using rule 18 (fact -> list .)
    DO              reduce using rule 18 (fact -> list .)
    THEN            reduce using rule 18 (fact -> list .)
    SEMICOLON       reduce using rule 18 (fact -> list .)
    $end            reduce using rule 18 (fact -> list .)
    OD              reduce using rule 18 (fact -> list .)
    ELSE            reduce using rule 18 (fact -> list .)
    END             reduce using rule 18 (fact -> list .)
    FI              reduce using rule 18 (fact -> list .)


state 20

    (24) proc -> PROC . LPAREN param_list RPAREN stmt_list END
    (25) proc -> PROC . LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 37


state 21

    (14) term -> fact .

    TIMES           reduce using rule 14 (term -> fact .)
    CONCAT          reduce using rule 14 (term -> fact .)
    PLUS            reduce using rule 14 (term -> fact .)
    MINUS           reduce using rule 14 (term -> fact .)
    SEMICOLON       reduce using rule 14 (term -> fact .)
    $end            reduce using rule 14 (term -> fact .)
    OD              reduce using rule 14 (term -> fact .)
    ELSE            reduce using rule 14 (term -> fact .)
    END             reduce using rule 14 (term -> fact .)
    FI              reduce using rule 14 (term -> fact .)
    COMMA           reduce using rule 14 (term -> fact .)
    RPAREN          reduce using rule 14 (term -> fact .)
    DO              reduce using rule 14 (term -> fact .)
    THEN            reduce using rule 14 (term -> fact .)


state 22

    (2) stmt_list -> stmt SEMICOLON . stmt_list
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (21) assign_stmt -> . IDENT ASSIGNOP expr
    (22) while_stmt -> . WHILE expr DO stmt_list OD
    (23) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI

    IDENT           shift and go to state 2
    WHILE           shift and go to state 4
    IF              shift and go to state 9

    stmt_list                      shift and go to state 38
    if_stmt                        shift and go to state 3
    stmt                           shift and go to state 5
    assign_stmt                    shift and go to state 6
    while_stmt                     shift and go to state 7

state 23

    (23) if_stmt -> IF expr . THEN stmt_list ELSE stmt_list FI
    (7) expr -> expr . PLUS term
    (8) expr -> expr . MINUS term

    THEN            shift and go to state 39
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 24

    (21) assign_stmt -> IDENT ASSIGNOP expr .
    (7) expr -> expr . PLUS term
    (8) expr -> expr . MINUS term

    SEMICOLON       reduce using rule 21 (assign_stmt -> IDENT ASSIGNOP expr .)
    $end            reduce using rule 21 (assign_stmt -> IDENT ASSIGNOP expr .)
    OD              reduce using rule 21 (assign_stmt -> IDENT ASSIGNOP expr .)
    END             reduce using rule 21 (assign_stmt -> IDENT ASSIGNOP expr .)
    ELSE            reduce using rule 21 (assign_stmt -> IDENT ASSIGNOP expr .)
    FI              reduce using rule 21 (assign_stmt -> IDENT ASSIGNOP expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 25

    (28) list -> LBRACKET sequence . RBRACKET

    RBRACKET        shift and go to state 40


state 26

    (32) listelement -> list .

    COMMA           reduce using rule 32 (listelement -> list .)
    RBRACKET        reduce using rule 32 (listelement -> list .)


state 27

    (33) listelement -> NUMBER .

    COMMA           reduce using rule 33 (listelement -> NUMBER .)
    RBRACKET        reduce using rule 33 (listelement -> NUMBER .)


state 28

    (29) list -> LBRACKET RBRACKET .

    TIMES           reduce using rule 29 (list -> LBRACKET RBRACKET .)
    CONCAT          reduce using rule 29 (list -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 29 (list -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 29 (list -> LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 29 (list -> LBRACKET RBRACKET .)
    $end            reduce using rule 29 (list -> LBRACKET RBRACKET .)
    OD              reduce using rule 29 (list -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 29 (list -> LBRACKET RBRACKET .)
    END             reduce using rule 29 (list -> LBRACKET RBRACKET .)
    FI              reduce using rule 29 (list -> LBRACKET RBRACKET .)
    THEN            reduce using rule 29 (list -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 29 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 29 (list -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 29 (list -> LBRACKET RBRACKET .)
    DO              reduce using rule 29 (list -> LBRACKET RBRACKET .)


state 29

    (30) sequence -> listelement . COMMA sequence
    (31) sequence -> listelement .

    COMMA           shift and go to state 41
    RBRACKET        reduce using rule 31 (sequence -> listelement .)


state 30

    (34) func_call -> IDENT LPAREN . expr_list RPAREN
    (9) expr_list -> . expr COMMA expr_list
    (10) expr_list -> . expr
    (7) expr -> . expr PLUS term
    (8) expr -> . expr MINUS term
    (11) expr -> . term
    (12) term -> . term TIMES fact
    (13) term -> . term CONCAT fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    term                           shift and go to state 17
    expr_list                      shift and go to state 42
    list                           shift and go to state 19
    expr                           shift and go to state 43
    proc                           shift and go to state 13
    fact                           shift and go to state 21

state 31

    (15) fact -> LPAREN expr . RPAREN
    (7) expr -> expr . PLUS term
    (8) expr -> expr . MINUS term

    RPAREN          shift and go to state 44
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 32

    (13) term -> term CONCAT . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    list                           shift and go to state 19
    proc                           shift and go to state 13
    fact                           shift and go to state 45

state 33

    (12) term -> term TIMES . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    list                           shift and go to state 19
    proc                           shift and go to state 13
    fact                           shift and go to state 46

state 34

    (22) while_stmt -> WHILE expr DO . stmt_list OD
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (21) assign_stmt -> . IDENT ASSIGNOP expr
    (22) while_stmt -> . WHILE expr DO stmt_list OD
    (23) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI

    IDENT           shift and go to state 2
    WHILE           shift and go to state 4
    IF              shift and go to state 9

    stmt_list                      shift and go to state 47
    if_stmt                        shift and go to state 3
    stmt                           shift and go to state 5
    assign_stmt                    shift and go to state 6
    while_stmt                     shift and go to state 7

state 35

    (7) expr -> expr PLUS . term
    (12) term -> . term TIMES fact
    (13) term -> . term CONCAT fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    term                           shift and go to state 48
    list                           shift and go to state 19
    proc                           shift and go to state 13
    fact                           shift and go to state 21

state 36

    (8) expr -> expr MINUS . term
    (12) term -> . term TIMES fact
    (13) term -> . term CONCAT fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    term                           shift and go to state 49
    list                           shift and go to state 19
    proc                           shift and go to state 13
    fact                           shift and go to state 21

state 37

    (24) proc -> PROC LPAREN . param_list RPAREN stmt_list END
    (25) proc -> PROC LPAREN . RPAREN stmt_list END
    (26) param_list -> . IDENT COMMA param_list
    (27) param_list -> . IDENT

    RPAREN          shift and go to state 51
    IDENT           shift and go to state 50

    param_list                     shift and go to state 52

state 38

    (2) stmt_list -> stmt SEMICOLON stmt_list .

    $end            reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    OD              reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    FI              reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    END             reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)
    ELSE            reduce using rule 2 (stmt_list -> stmt SEMICOLON stmt_list .)


state 39

    (23) if_stmt -> IF expr THEN . stmt_list ELSE stmt_list FI
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (21) assign_stmt -> . IDENT ASSIGNOP expr
    (22) while_stmt -> . WHILE expr DO stmt_list OD
    (23) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI

    IDENT           shift and go to state 2
    WHILE           shift and go to state 4
    IF              shift and go to state 9

    stmt_list                      shift and go to state 53
    if_stmt                        shift and go to state 3
    stmt                           shift and go to state 5
    assign_stmt                    shift and go to state 6
    while_stmt                     shift and go to state 7

state 40

    (28) list -> LBRACKET sequence RBRACKET .

    TIMES           reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    CONCAT          reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    PLUS            reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    MINUS           reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    SEMICOLON       reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    $end            reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    OD              reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    ELSE            reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    END             reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    FI              reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    THEN            reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    COMMA           reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    RBRACKET        reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    RPAREN          reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)
    DO              reduce using rule 28 (list -> LBRACKET sequence RBRACKET .)


state 41

    (30) sequence -> listelement COMMA . sequence
    (30) sequence -> . listelement COMMA sequence
    (31) sequence -> . listelement
    (32) listelement -> . list
    (33) listelement -> . NUMBER
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET

    NUMBER          shift and go to state 27
    LBRACKET        shift and go to state 12

    listelement                    shift and go to state 29
    list                           shift and go to state 26
    sequence                       shift and go to state 54

state 42

    (34) func_call -> IDENT LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 55


state 43

    (9) expr_list -> expr . COMMA expr_list
    (10) expr_list -> expr .
    (7) expr -> expr . PLUS term
    (8) expr -> expr . MINUS term

    COMMA           shift and go to state 56
    RPAREN          reduce using rule 10 (expr_list -> expr .)
    PLUS            shift and go to state 35
    MINUS           shift and go to state 36


state 44

    (15) fact -> LPAREN expr RPAREN .

    TIMES           reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    CONCAT          reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    DO              reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    THEN            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    $end            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    OD              reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    END             reduce using rule 15 (fact -> LPAREN expr RPAREN .)
    FI              reduce using rule 15 (fact -> LPAREN expr RPAREN .)


state 45

    (13) term -> term CONCAT fact .

    TIMES           reduce using rule 13 (term -> term CONCAT fact .)
    CONCAT          reduce using rule 13 (term -> term CONCAT fact .)
    PLUS            reduce using rule 13 (term -> term CONCAT fact .)
    MINUS           reduce using rule 13 (term -> term CONCAT fact .)
    SEMICOLON       reduce using rule 13 (term -> term CONCAT fact .)
    $end            reduce using rule 13 (term -> term CONCAT fact .)
    OD              reduce using rule 13 (term -> term CONCAT fact .)
    ELSE            reduce using rule 13 (term -> term CONCAT fact .)
    END             reduce using rule 13 (term -> term CONCAT fact .)
    FI              reduce using rule 13 (term -> term CONCAT fact .)
    COMMA           reduce using rule 13 (term -> term CONCAT fact .)
    RPAREN          reduce using rule 13 (term -> term CONCAT fact .)
    DO              reduce using rule 13 (term -> term CONCAT fact .)
    THEN            reduce using rule 13 (term -> term CONCAT fact .)


state 46

    (12) term -> term TIMES fact .

    TIMES           reduce using rule 12 (term -> term TIMES fact .)
    CONCAT          reduce using rule 12 (term -> term TIMES fact .)
    PLUS            reduce using rule 12 (term -> term TIMES fact .)
    MINUS           reduce using rule 12 (term -> term TIMES fact .)
    SEMICOLON       reduce using rule 12 (term -> term TIMES fact .)
    $end            reduce using rule 12 (term -> term TIMES fact .)
    OD              reduce using rule 12 (term -> term TIMES fact .)
    ELSE            reduce using rule 12 (term -> term TIMES fact .)
    END             reduce using rule 12 (term -> term TIMES fact .)
    FI              reduce using rule 12 (term -> term TIMES fact .)
    COMMA           reduce using rule 12 (term -> term TIMES fact .)
    RPAREN          reduce using rule 12 (term -> term TIMES fact .)
    DO              reduce using rule 12 (term -> term TIMES fact .)
    THEN            reduce using rule 12 (term -> term TIMES fact .)


state 47

    (22) while_stmt -> WHILE expr DO stmt_list . OD

    OD              shift and go to state 57


state 48

    (7) expr -> expr PLUS term .
    (12) term -> term . TIMES fact
    (13) term -> term . CONCAT fact

    PLUS            reduce using rule 7 (expr -> expr PLUS term .)
    MINUS           reduce using rule 7 (expr -> expr PLUS term .)
    SEMICOLON       reduce using rule 7 (expr -> expr PLUS term .)
    $end            reduce using rule 7 (expr -> expr PLUS term .)
    OD              reduce using rule 7 (expr -> expr PLUS term .)
    ELSE            reduce using rule 7 (expr -> expr PLUS term .)
    END             reduce using rule 7 (expr -> expr PLUS term .)
    FI              reduce using rule 7 (expr -> expr PLUS term .)
    COMMA           reduce using rule 7 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 7 (expr -> expr PLUS term .)
    THEN            reduce using rule 7 (expr -> expr PLUS term .)
    DO              reduce using rule 7 (expr -> expr PLUS term .)
    TIMES           shift and go to state 33
    CONCAT          shift and go to state 32


state 49

    (8) expr -> expr MINUS term .
    (12) term -> term . TIMES fact
    (13) term -> term . CONCAT fact

    PLUS            reduce using rule 8 (expr -> expr MINUS term .)
    MINUS           reduce using rule 8 (expr -> expr MINUS term .)
    SEMICOLON       reduce using rule 8 (expr -> expr MINUS term .)
    $end            reduce using rule 8 (expr -> expr MINUS term .)
    OD              reduce using rule 8 (expr -> expr MINUS term .)
    ELSE            reduce using rule 8 (expr -> expr MINUS term .)
    END             reduce using rule 8 (expr -> expr MINUS term .)
    FI              reduce using rule 8 (expr -> expr MINUS term .)
    COMMA           reduce using rule 8 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 8 (expr -> expr MINUS term .)
    THEN            reduce using rule 8 (expr -> expr MINUS term .)
    DO              reduce using rule 8 (expr -> expr MINUS term .)
    TIMES           shift and go to state 33
    CONCAT          shift and go to state 32


state 50

    (26) param_list -> IDENT . COMMA param_list
    (27) param_list -> IDENT .

    COMMA           shift and go to state 58
    RPAREN          reduce using rule 27 (param_list -> IDENT .)


state 51

    (25) proc -> PROC LPAREN RPAREN . stmt_list END
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (21) assign_stmt -> . IDENT ASSIGNOP expr
    (22) while_stmt -> . WHILE expr DO stmt_list OD
    (23) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI

    IDENT           shift and go to state 2
    WHILE           shift and go to state 4
    IF              shift and go to state 9

    stmt_list                      shift and go to state 59
    if_stmt                        shift and go to state 3
    stmt                           shift and go to state 5
    assign_stmt                    shift and go to state 6
    while_stmt                     shift and go to state 7

state 52

    (24) proc -> PROC LPAREN param_list . RPAREN stmt_list END

    RPAREN          shift and go to state 60


state 53

    (23) if_stmt -> IF expr THEN stmt_list . ELSE stmt_list FI

    ELSE            shift and go to state 61


state 54

    (30) sequence -> listelement COMMA sequence .

    RBRACKET        reduce using rule 30 (sequence -> listelement COMMA sequence .)


state 55

    (34) func_call -> IDENT LPAREN expr_list RPAREN .

    TIMES           reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    CONCAT          reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    SEMICOLON       reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    $end            reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    OD              reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    ELSE            reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    END             reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    FI              reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    RPAREN          reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    DO              reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)
    THEN            reduce using rule 34 (func_call -> IDENT LPAREN expr_list RPAREN .)


state 56

    (9) expr_list -> expr COMMA . expr_list
    (9) expr_list -> . expr COMMA expr_list
    (10) expr_list -> . expr
    (7) expr -> . expr PLUS term
    (8) expr -> . expr MINUS term
    (11) expr -> . term
    (12) term -> . term TIMES fact
    (13) term -> . term CONCAT fact
    (14) term -> . fact
    (15) fact -> . LPAREN expr RPAREN
    (16) fact -> . NUMBER
    (17) fact -> . IDENT
    (18) fact -> . list
    (19) fact -> . func_call
    (20) fact -> . proc
    (28) list -> . LBRACKET sequence RBRACKET
    (29) list -> . LBRACKET RBRACKET
    (34) func_call -> . IDENT LPAREN expr_list RPAREN
    (24) proc -> . PROC LPAREN param_list RPAREN stmt_list END
    (25) proc -> . PROC LPAREN RPAREN stmt_list END

    LPAREN          shift and go to state 16
    NUMBER          shift and go to state 11
    IDENT           shift and go to state 15
    LBRACKET        shift and go to state 12
    PROC            shift and go to state 20

    func_call                      shift and go to state 14
    term                           shift and go to state 17
    expr                           shift and go to state 43
    list                           shift and go to state 19
    expr_list                      shift and go to state 62
    proc                           shift and go to state 13
    fact                           shift and go to state 21

state 57

    (22) while_stmt -> WHILE expr DO stmt_list OD .

    SEMICOLON       reduce using rule 22 (while_stmt -> WHILE expr DO stmt_list OD .)
    $end            reduce using rule 22 (while_stmt -> WHILE expr DO stmt_list OD .)
    OD              reduce using rule 22 (while_stmt -> WHILE expr DO stmt_list OD .)
    ELSE            reduce using rule 22 (while_stmt -> WHILE expr DO stmt_list OD .)
    END             reduce using rule 22 (while_stmt -> WHILE expr DO stmt_list OD .)
    FI              reduce using rule 22 (while_stmt -> WHILE expr DO stmt_list OD .)


state 58

    (26) param_list -> IDENT COMMA . param_list
    (26) param_list -> . IDENT COMMA param_list
    (27) param_list -> . IDENT

    IDENT           shift and go to state 50

    param_list                     shift and go to state 63

state 59

    (25) proc -> PROC LPAREN RPAREN stmt_list . END

    END             shift and go to state 64


state 60

    (24) proc -> PROC LPAREN param_list RPAREN . stmt_list END
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (21) assign_stmt -> . IDENT ASSIGNOP expr
    (22) while_stmt -> . WHILE expr DO stmt_list OD
    (23) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI

    IDENT           shift and go to state 2
    WHILE           shift and go to state 4
    IF              shift and go to state 9

    stmt_list                      shift and go to state 65
    if_stmt                        shift and go to state 3
    stmt                           shift and go to state 5
    assign_stmt                    shift and go to state 6
    while_stmt                     shift and go to state 7

state 61

    (23) if_stmt -> IF expr THEN stmt_list ELSE . stmt_list FI
    (2) stmt_list -> . stmt SEMICOLON stmt_list
    (3) stmt_list -> . stmt
    (4) stmt -> . assign_stmt
    (5) stmt -> . while_stmt
    (6) stmt -> . if_stmt
    (21) assign_stmt -> . IDENT ASSIGNOP expr
    (22) while_stmt -> . WHILE expr DO stmt_list OD
    (23) if_stmt -> . IF expr THEN stmt_list ELSE stmt_list FI

    IDENT           shift and go to state 2
    WHILE           shift and go to state 4
    IF              shift and go to state 9

    stmt_list                      shift and go to state 66
    if_stmt                        shift and go to state 3
    stmt                           shift and go to state 5
    assign_stmt                    shift and go to state 6
    while_stmt                     shift and go to state 7

state 62

    (9) expr_list -> expr COMMA expr_list .

    RPAREN          reduce using rule 9 (expr_list -> expr COMMA expr_list .)


state 63

    (26) param_list -> IDENT COMMA param_list .

    RPAREN          reduce using rule 26 (param_list -> IDENT COMMA param_list .)


state 64

    (25) proc -> PROC LPAREN RPAREN stmt_list END .

    TIMES           reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    CONCAT          reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    DO              reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    PLUS            reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    MINUS           reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    THEN            reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    SEMICOLON       reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    $end            reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    OD              reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    ELSE            reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    END             reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    FI              reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    RPAREN          reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)
    COMMA           reduce using rule 25 (proc -> PROC LPAREN RPAREN stmt_list END .)


state 65

    (24) proc -> PROC LPAREN param_list RPAREN stmt_list . END

    END             shift and go to state 67


state 66

    (23) if_stmt -> IF expr THEN stmt_list ELSE stmt_list . FI

    FI              shift and go to state 68


state 67

    (24) proc -> PROC LPAREN param_list RPAREN stmt_list END .

    TIMES           reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    CONCAT          reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    DO              reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    PLUS            reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    MINUS           reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    THEN            reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    SEMICOLON       reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    $end            reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    OD              reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    ELSE            reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    END             reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    FI              reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    RPAREN          reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)
    COMMA           reduce using rule 24 (proc -> PROC LPAREN param_list RPAREN stmt_list END .)


state 68

    (23) if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .

    SEMICOLON       reduce using rule 23 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    OD              reduce using rule 23 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    END             reduce using rule 23 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    $end            reduce using rule 23 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    ELSE            reduce using rule 23 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)
    FI              reduce using rule 23 (if_stmt -> IF expr THEN stmt_list ELSE stmt_list FI .)

